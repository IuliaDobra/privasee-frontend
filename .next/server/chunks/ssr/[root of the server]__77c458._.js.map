{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/services/companyService.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:3001/api/companies\";\n\nexport const fetchCompanies = async () => {\n    try {\n        const response = await axios.get(API_URL);\n        return response.data; // Array of { company_id, company_name }\n    } catch (error) {\n        // @ts-ignore\n        console.error(\"Error fetching companies:\", error.message);\n        throw new Error(\"Failed to fetch companies\");\n    }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,UAAU;AAET,MAAM,iBAAiB;IAC1B,IAAI;QACA,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;QACjC,OAAO,SAAS,IAAI,EAAE,wCAAwC;IAClE,EAAE,OAAO,OAAO;QACZ,aAAa;QACb,QAAQ,KAAK,CAAC,6BAA6B,MAAM,OAAO;QACxD,MAAM,IAAI,MAAM;IACpB;AACJ"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/services/userService.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:3001/api/users\";\n\nexport const fetchUsers = async () => {\n    try {\n        const response = await axios.get(API_URL);\n        return response.data; // Array of user emails\n    } catch (error) {\n        // @ts-ignore\n        console.error(\"Error fetching users:\", error.message);\n        throw new Error(\"Failed to fetch users\");\n    }\n};\n\nexport const getCurrentUser = () => {\n    return \"me@me.com\";\n};\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,UAAU;AAET,MAAM,aAAa;IACtB,IAAI;QACA,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC;QACjC,OAAO,SAAS,IAAI,EAAE,uBAAuB;IACjD,EAAE,OAAO,OAAO;QACZ,aAAa;QACb,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO;QACpD,MAAM,IAAI,MAAM;IACpB;AACJ;AAEO,MAAM,iBAAiB;IAC1B,OAAO;AACX"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/utils/dateUtils.ts"],"sourcesContent":["export const formatDate = (isoString: string): string => {\n    if (!isoString) return \"\";\n\n    const date = new Date(isoString);\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Month is 0-based\n    const year = date.getFullYear();\n    const hours = String(date.getHours()).padStart(2, \"0\");\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\n\n    return `${day}/${month}/${year} ${hours}:${minutes}`;\n};"],"names":[],"mappings":";;;AAAO,MAAM,aAAa,CAAC;IACvB,IAAI,CAAC,WAAW,OAAO;IAEvB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,MAAM,OAAO,KAAK,OAAO,IAAI,QAAQ,CAAC,GAAG;IAC/C,MAAM,QAAQ,OAAO,KAAK,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,MAAM,mBAAmB;IAC/E,MAAM,OAAO,KAAK,WAAW;IAC7B,MAAM,QAAQ,OAAO,KAAK,QAAQ,IAAI,QAAQ,CAAC,GAAG;IAClD,MAAM,UAAU,OAAO,KAAK,UAAU,IAAI,QAAQ,CAAC,GAAG;IAEtD,OAAO,GAAG,IAAI,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,MAAM,CAAC,EAAE,SAAS;AACxD"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/components/QuestionDialog.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    TextField,\n    MenuItem,\n    Select,\n    InputLabel,\n    FormControl,\n    Box,\n} from \"@mui/material\";\nimport { fetchCompanies } from \"../services/companyService\";\nimport { fetchUsers } from \"../services/userService\";\nimport { formatDate } from \"../utils/dateUtils\"; // For date formatting\n\ninterface QuestionDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onSave: (question: any) => void;\n    initialData?: any;\n    isEdit?: boolean;\n    isView?: boolean;\n}\n\nconst QuestionDialog: React.FC<QuestionDialogProps> = ({\n                                                           open,\n                                                           onClose,\n                                                           onSave,\n                                                           initialData,\n                                                           isEdit = false,\n                                                           isView = false,\n                                                       }) => {\n    const [formData, setFormData] = useState({\n        id: \"\",\n        question: \"\",\n        question_description: \"\",\n        answer: \"\",\n        properties: \"\",\n        assigned_to: \"\",\n        company_name: \"\",\n        company_id: \"\",\n        updated_by: \"\",\n        created_by: \"\",\n        created_at: \"\",\n        updated_at: \"\",\n    });\n\n    const [companyOptions, setCompanyOptions] = useState<\n        { company_id: string; company_name: string }[]\n    >([]);\n\n    const [propertyFields, setPropertyFields] = useState<Record<string, string>>({});\n    const [userOptions, setUserOptions] = useState<string[]>([]);\n    const [isEditing, setIsEditing] = useState(false);\n    const [isViewing, setIsViewing] = useState(false);\n\n    const parseProperties = (properties: string) => {\n        return properties\n            .split(\",\")\n            .map((pair) => pair.split(\":\"))\n            .reduce((acc, [key, value]) => {\n                acc[key.trim()] = value.trim();\n                return acc;\n            }, {} as Record<string, string>);\n    };\n\n    const serializeProperties = (properties: Record<string, string>) => {\n        return Object.entries(properties)\n            .map(([key, value]) => `${key}:${value}`)\n            .join(\", \");\n    };\n\n    useEffect(() => {\n        const fetchDropdownData = async () => {\n            try {\n                const [companies, users] = await Promise.all([fetchCompanies(), fetchUsers()]);\n                setCompanyOptions(companies);\n                setUserOptions(users);\n            } catch (error) {\n                console.error(\"Error fetching dropdown data:\", error.message);\n            }\n        };\n        fetchDropdownData();\n    }, []);\n\n    useEffect(() => {\n        if (initialData && Object.keys(initialData).length > 0) {\n            setFormData(initialData);\n            setIsEditing(isEdit);\n            setIsViewing(isView);\n            if (initialData.properties) {\n                setPropertyFields(parseProperties(initialData.properties));\n            }\n        } else {\n            setFormData({\n                id: \"\",\n                properties: \"\",\n                question: \"\",\n                question_description: \"\",\n                answer: \"\",\n                assigned_to: \"\",\n                company_name: \"\",\n                company_id: \"\",\n                updated_by: \"\",\n                created_by: \"\",\n                created_at: \"\",\n                updated_at: \"\",\n            });\n            setPropertyFields({});\n            setIsEditing(false); // Ensure it's not in edit mode\n            setIsViewing(false); //ensure it's not in view mode\n        }\n    }, [initialData, isEdit, isView]);\n\n    useEffect(() => {\n        if (initialData?.properties) {\n            setPropertyFields(parseProperties(initialData.properties));\n        }\n    }, [initialData]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\n        const { name, value } = e.target;\n        setFormData({ ...formData, [name!]: value });\n    };\n\n    const handleCompanyChange = (e: any) => {\n        const selectedCompany = companyOptions.find((company) => company.company_name === e.target.value);\n        if (selectedCompany) {\n            setFormData({\n                ...formData,\n                company_name: selectedCompany.company_name,\n                company_id: selectedCompany.company_id,\n            });\n        }\n    };\n\n    const handleSave = () => {\n// Remove empty key-value pairs\n        const filteredProperties = Object.fromEntries(\n            Object.entries(propertyFields).filter(([key, value]) => key.trim() && value.trim())\n        );\n\n        const serializedProperties = serializeProperties(filteredProperties);\n        const updatedQuestion = {\n            ...formData,\n            properties: serializedProperties,\n            updated_at: new Date().toISOString(),\n            created_at: formData.created_at || new Date().toISOString(),\n        };\n        onSave(updatedQuestion);\n        onClose();\n    };\n\n    const toggleEditMode = () => {\n        setIsEditing(true);\n        setIsViewing(false);\n\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} fullWidth>\n            <DialogTitle>\n                {isViewing && !isEditing\n                    ? \"View Question\"\n                    : isEditing\n                        ? \"Edit Question\"\n                        : \"Create New Question\"}\n            </DialogTitle>\n            <DialogContent>\n                {/* Question and Description */}\n                <TextField\n                    label=\"Question\"\n                    name=\"question\"\n                    fullWidth\n                    margin=\"dense\"\n                    value={formData.question}\n                    onChange={handleInputChange}\n                    disabled={isViewing && !isEditing}\n                />\n                <TextField\n                    label=\"Question Description\"\n                    name=\"question_description\"\n                    fullWidth\n                    margin=\"dense\"\n                    value={formData.question_description}\n                    onChange={handleInputChange}\n                    disabled={isViewing && !isEditing}\n                />\n                <TextField\n                    label=\"Answer\"\n                    name=\"answer\"\n                    fullWidth\n                    margin=\"dense\"\n                    value={formData.answer}\n                    onChange={handleInputChange}\n                    disabled={isViewing && !isEditing}\n                />\n\n                {/* Company Name */}\n                <FormControl fullWidth margin=\"dense\" disabled={isViewing && !isEditing}>\n                    <InputLabel>Company Name</InputLabel>\n                    <Select\n                        value={formData.company_name}\n                        onChange={handleCompanyChange}\n                        name=\"company_name\"\n                        label=\"Company Name\"\n                    >\n                        {companyOptions.map((company) => (\n                            <MenuItem key={company.company_id} value={company.company_name}>\n                                {company.company_name}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                {/* Assigned To */}\n                <FormControl fullWidth margin=\"dense\" disabled={isViewing && !isEditing}>\n                    <InputLabel>Assigned To</InputLabel>\n                    <Select\n                        value={formData.assigned_to}\n                        onChange={handleInputChange}\n                        name=\"assigned_to\"\n                        label=\"Assigned To\"\n                    >\n                        {userOptions.map((user) => (\n                            <MenuItem key={user} value={user}>\n                                {user}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <Box>\n                    {Object.entries(propertyFields).map(([key, value], index) => (\n                        <Box key={index} display=\"flex\" gap={2} alignItems=\"center\" justifyContent=\"space-evenly\">\n                            <TextField\n                                label=\"Key\"\n                                value={key}\n                                fullWidth\n                                onChange={(e) => {\n                                    const newFields = { ...propertyFields };\n                                    const newKey = e.target.value;\n                                    delete newFields[key];\n                                    newFields[newKey] = value;\n                                    setPropertyFields(newFields);\n                                }}\n                                disabled={isViewing && !isEditing}\n                                margin=\"dense\"\n                            />\n                            <TextField\n                                label=\"Value\"\n                                value={value}\n                                fullWidth\n                                onChange={(e) => {\n                                    const newFields = { ...propertyFields };\n                                    newFields[key] = e.target.value;\n                                    setPropertyFields(newFields);\n                                }}\n                                disabled={isViewing && !isEditing}\n                                margin=\"dense\"\n                            />\n                            {isEditing && (\n                                <Button\n                                    color=\"error\"\n                                    onClick={() => {\n                                        const newFields = { ...propertyFields };\n                                        delete newFields[key];\n                                        setPropertyFields(newFields);\n                                    }}\n                                    disabled={isViewing && !isEditing}\n                                >\n                                    Remove\n                                </Button>\n                            )}\n                        </Box>\n                    ))}\n\n                    {/* Display \"Add Property\" button only if appropriate */}\n                    {!isViewing && (isEditing || Object.keys(propertyFields).length === 0) && (\n                        <Button\n                            variant=\"outlined\"\n                            onClick={() => setPropertyFields({ ...propertyFields, \"\": \"\" })}\n                        >\n                            Add Property\n                        </Button>\n                    )}\n                </Box>\n\n                {/* Created/Updated Fields - Only Render in Edit or View */}\n                {(isEditing || isViewing) && formData.id && (\n                    <>\n                        <Box display=\"flex\" gap={2} marginTop={2}>\n                            <TextField\n                                label=\"Created By\"\n                                name=\"created_by\"\n                                fullWidth\n                                margin=\"dense\"\n                                value={formData.created_by}\n                                disabled\n                            />\n                            <TextField\n                                label=\"Created At\"\n                                name=\"created_at\"\n                                fullWidth\n                                margin=\"dense\"\n                                value={formatDate(formData.created_at)}\n                                disabled\n                            />\n                        </Box>\n\n                        <Box display=\"flex\" gap={2} marginTop={2}>\n                            <TextField\n                                label=\"Updated By\"\n                                name=\"updated_by\"\n                                fullWidth\n                                margin=\"dense\"\n                                value={formData.updated_by}\n                                disabled\n                            />\n                            <TextField\n                                label=\"Updated At\"\n                                name=\"updated_at\"\n                                fullWidth\n                                margin=\"dense\"\n                                value={formatDate(formData.updated_at)}\n                                disabled\n                            />\n                        </Box>\n                    </>\n                )}\n            </DialogContent>\n\n            <DialogActions>\n                {isViewing && !isEditing ? (\n                    <Button onClick={toggleEditMode} color=\"primary\" variant=\"contained\">\n                        Switch to Edit\n                    </Button>\n                ) : (\n                    <Button onClick={handleSave} color=\"primary\" variant=\"contained\">\n                        Save\n                    </Button>\n                )}\n                <Button onClick={onClose} color=\"secondary\">\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default QuestionDialog;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 661, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/components/ConfirmDialog.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Typography,\n} from \"@mui/material\";\n\ninterface ConfirmDialogProps {\n    open: boolean;\n    title?: string;\n    description: string;\n    onConfirm: () => void;\n    onClose: () => void;\n}\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n                                                         open,\n                                                         title = \"Confirm Action\",\n                                                         description,\n                                                         onConfirm,\n                                                         onClose,\n                                                     }) => {\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{title}</DialogTitle>\n            <DialogContent>\n                <Typography>{description}</Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"secondary\" variant=\"outlined\">\n                    No\n                </Button>\n                <Button onClick={onConfirm} color=\"error\" variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDialog;\n"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAiBA,MAAM,gBAA8C,CAAC,EACI,IAAI,EACJ,QAAQ,gBAAgB,EACxB,WAAW,EACX,SAAS,EACT,OAAO,EACV;IAClD,qBACI,8OAAC,0LAAA,CAAA,SAAM;QAAC,MAAM;QAAM,SAAS;;0BACzB,8OAAC,yMAAA,CAAA,cAAW;0BAAE;;;;;;0BACd,8OAAC,+MAAA,CAAA,gBAAa;0BACV,cAAA,8OAAC,sMAAA,CAAA,aAAU;8BAAE;;;;;;;;;;;0BAEjB,8OAAC,+MAAA,CAAA,gBAAa;;kCACV,8OAAC,0LAAA,CAAA,SAAM;wBAAC,SAAS;wBAAS,OAAM;wBAAY,SAAQ;kCAAW;;;;;;kCAG/D,8OAAC,0LAAA,CAAA,SAAM;wBAAC,SAAS;wBAAW,OAAM;wBAAQ,SAAQ;kCAAY;;;;;;;;;;;;;;;;;;AAM9E;uCAEe"}},
    {"offset": {"line": 734, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 740, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/services/questionService.ts"],"sourcesContent":["import axios from \"axios\";\nimport {QuestionData} from \"../types/DataTypes\";\nimport {getCurrentUser} from \"./userService\";\n\nconst API_URL = \"http://localhost:3001/api/questions\";\n\nexport const fetchQuestions = async () => {\n    try {\n        console.log(\"Requesting all data\");\n        const response = await axios.get(API_URL); // No params for pagination\n        console.log(\"Data received:\", response.data);\n        return response.data;\n    } catch (error) {\n        // @ts-ignore\n        console.error(\"Error fetching questions:\", error.message);\n        // @ts-ignore\n        if (error.response) {\n            // @ts-ignore\n            console.error(\"Server Response:\", error.response.data);\n        }\n        throw error;\n    }\n};\n\nexport const deleteQuestion = async (id: string) => {\n    return await axios.delete(`${API_URL}/${id}`);\n};\n\n// Save (Create or Update) a question\nexport const saveQuestion = async (question: QuestionData) => {\n    try {\n        const payload = { ...question, updated_by: getCurrentUser() };\n\n        // Remove the \"id\" field for CREATE (POST)\n        if (!question.id) {\n            delete payload.id;\n        }\n\n        if (question.id) {\n            // Update an existing record\n            return await axios.put(`${API_URL}/${question.id}`, payload);\n        } else {\n            // Create a new record\n            return await axios.post(API_URL, {...payload, created_by: getCurrentUser()});\n        }\n    } catch (error) {\n        // @ts-ignore\n        console.error(\"Error saving question:\", error.message);\n        throw error;\n    }\n};\n\nexport const bulkReassignQuestions = async (ids: string[], assigned_to: string) => {\n    return await axios.put(`${API_URL}/bulk-reassign`, {\n        ids,\n        assigned_to,\n        updated_by: getCurrentUser(),\n    });\n};\n\n\n\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;;AAIA,MAAM,UAAU;AAET,MAAM,iBAAiB;IAC1B,IAAI;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,UAAU,2BAA2B;QACtE,QAAQ,GAAG,CAAC,kBAAkB,SAAS,IAAI;QAC3C,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAO;QACZ,aAAa;QACb,QAAQ,KAAK,CAAC,6BAA6B,MAAM,OAAO;QACxD,aAAa;QACb,IAAI,MAAM,QAAQ,EAAE;YAChB,aAAa;YACb,QAAQ,KAAK,CAAC,oBAAoB,MAAM,QAAQ,CAAC,IAAI;QACzD;QACA,MAAM;IACV;AACJ;AAEO,MAAM,iBAAiB,OAAO;IACjC,OAAO,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI;AAChD;AAGO,MAAM,eAAe,OAAO;IAC/B,IAAI;QACA,MAAM,UAAU;YAAE,GAAG,QAAQ;YAAE,YAAY,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD;QAAI;QAE5D,0CAA0C;QAC1C,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,OAAO,QAAQ,EAAE;QACrB;QAEA,IAAI,SAAS,EAAE,EAAE;YACb,4BAA4B;YAC5B,OAAO,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;QACxD,OAAO;YACH,sBAAsB;YACtB,OAAO,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,SAAS;gBAAC,GAAG,OAAO;gBAAE,YAAY,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD;YAAG;QAC9E;IACJ,EAAE,OAAO,OAAO;QACZ,aAAa;QACb,QAAQ,KAAK,CAAC,0BAA0B,MAAM,OAAO;QACrD,MAAM;IACV;AACJ;AAEO,MAAM,wBAAwB,OAAO,KAAe;IACvD,OAAO,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,cAAc,CAAC,EAAE;QAC/C;QACA;QACA,YAAY,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD;IAC7B;AACJ"}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 810, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/components/TableComponent.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Checkbox,\n    IconButton,\n    Box,\n    Button, TablePagination, FormControl, InputLabel, Select, MenuItem, CircularProgress, Typography,\n} from \"@mui/material\";\nimport { Visibility, Edit, Delete } from \"@mui/icons-material\";\nimport QuestionDialog from \"./QuestionDialog\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport { formatDate } from \"../utils/dateUtils\";\nimport { bulkReassignQuestions, deleteQuestion, fetchQuestions, saveQuestion } from '../services/questionService'\nimport { fetchUsers } from '../services/userService'\nimport {QuestionData} from \"../types/DataTypes\";\n\nconst TableComponent: React.FC = () => {\n    // Pagination state\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    const [selectedRows, setSelectedRows] = useState<string[]>([]);\n    const [assignee, setAssignee] = useState(\"\");\n    const [data, setData] = useState<QuestionData[]>([]);\n    const [users, setUsers] = useState<string[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    // States for dialogs\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\n    const [dialogData, setDialogData] = useState<QuestionData | null>(null);\n    const [isEdit, setIsEdit] = useState(false);\n    const [isView, setIsView] = useState(false);\n    const [deleteId, setDeleteId] = useState<string | null>(null);\n\n\n    const loadData = async () => {\n        setLoading(true);\n        try {\n            const [questionsResponse, usersResponse] = await Promise.all([\n                fetchQuestions(),\n                fetchUsers(),\n            ]);\n            setData(questionsResponse.records);\n            setUsers(usersResponse); // Populate users\n        } catch (error) {\n            console.error(\"Failed to load data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    // Handle row selection\n    const handleRowSelect = (id: string) => {\n        setSelectedRows((prev) =>\n            prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]\n        );\n    };\n\n    const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.checked) {\n            setSelectedRows(data.map((row) => row.id));\n        } else {\n            setSelectedRows([]);\n        }\n    };\n\n    const handleBulkReassign = async () => {\n        if (!assignee) return alert(\"Please select a user to reassign questions.\");\n        try {\n            await bulkReassignQuestions(selectedRows, assignee);\n            setSelectedRows([]); // Clear selection\n            loadData(); // Reload data\n        } catch (error) {\n            console.error(\"Bulk reassign failed:\", error);\n        }\n    };\n\n    const handleChangePage = (_: React.MouseEvent | null, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0); // Reset to the first page\n    };\n\n    // Paginated data slice\n    const paginatedData = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n\n    const handleSave = async (newQuestion: QuestionData) => {\n        await saveQuestion(newQuestion);\n        setDialogOpen(false);\n        loadData();\n    };\n\n    const handleDelete = async () => {\n        if (deleteId) {\n            await deleteQuestion(deleteId);\n            setConfirmDialogOpen(false);\n            loadData();\n        }\n    };\n\n\n    if (loading) {\n        return (\n            <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                height=\"100vh\" // Full-screen loader\n            >\n                <CircularProgress />\n                <Typography variant=\"h6\" marginLeft={2}>\n                    Loading data...\n                </Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <Box sx={{ overflow: \"auto\", padding: \"20px\", backgroundColor: \"#fff\"}}>\n            <Box mb={2} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        setDialogData(null);\n                        setIsEdit(false);\n                        setIsView(false);\n                        setDialogOpen(true);\n                    }}\n                >\n                    Create New Question\n                </Button>\n\n                {selectedRows.length > 0 && (\n                    <Box display=\"flex\" gap={2}>\n                        <FormControl>\n                            <InputLabel>Reassign To</InputLabel>\n                            <Select\n                                value={assignee}\n                                onChange={(e) => setAssignee(e.target.value)}\n                                style={{ width: 200 }}\n                            >\n                                {users.map((user) => (\n                                    <MenuItem key={user} value={user}>\n                                        {user}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleBulkReassign}\n                        >\n                            Reassign Selected\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead sx={{ backgroundColor: \"#f5f5f5\" }}>\n                        <TableRow>\n                            <TableCell padding=\"checkbox\">\n                                <Checkbox\n                                    indeterminate={\n                                        selectedRows.length > 0 &&\n                                        selectedRows.length < data.length\n                                    }\n                                    checked={data.length > 0 && selectedRows.length === data.length}\n                                    onChange={handleSelectAll}\n                                />\n                            </TableCell>\n                            <TableCell>ID</TableCell>\n                            <TableCell>Question</TableCell>\n                            <TableCell>Answer</TableCell>\n                            <TableCell>Properties</TableCell>\n                            <TableCell>Assigned To</TableCell>\n                            <TableCell>Company</TableCell>\n                            <TableCell>Company ID</TableCell>\n                            <TableCell>Created By</TableCell>\n                            <TableCell>Created At</TableCell>\n                            <TableCell>Updated By</TableCell>\n                            <TableCell>Updated At</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {paginatedData.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell padding=\"checkbox\">\n                                    <Checkbox\n                                        checked={selectedRows.includes(row.id)}\n                                        onChange={() => handleRowSelect(row.id)}\n                                    />\n                                </TableCell>\n                                <TableCell>{row.id}</TableCell>\n                                <TableCell>{row.question}</TableCell>\n                                <TableCell>{row.answer}</TableCell>\n                                <TableCell>{row.properties}</TableCell>\n                                <TableCell>{row.assigned_to}</TableCell>\n                                <TableCell>{row.company_name}</TableCell>\n                                <TableCell>{row.company_id}</TableCell>\n                                <TableCell>{row.created_by}</TableCell>\n                                <TableCell>{formatDate(row.created_at)}</TableCell>\n                                <TableCell>{row.updated_by}</TableCell>\n                                <TableCell>{formatDate(row.updated_at)}</TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        color=\"primary\"\n                                        onClick={() => {\n                                            setDialogData(row);\n                                            setIsView(true);\n                                            setIsEdit(false);\n                                            setDialogOpen(true);\n                                        }}\n                                    >\n                                        <Visibility />\n                                    </IconButton>\n                                    <IconButton\n                                        color=\"primary\"\n                                        onClick={() => {\n                                            setDialogData(row);\n                                            setIsEdit(true);\n                                            setIsView(false);\n                                            setDialogOpen(true);\n                                        }}\n                                    >\n                                        <Edit />\n                                    </IconButton>\n                                    <IconButton\n                                        color=\"error\"\n                                        onClick={() => {\n                                            setDeleteId(row.id);\n                                            setConfirmDialogOpen(true);\n                                        }}\n                                    >\n                                        <Delete />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={data.length || 0}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n\n            {/* Dialogs */}\n            <QuestionDialog\n                open={dialogOpen}\n                onClose={() => setDialogOpen(false)}\n                onSave={handleSave}\n                initialData={dialogData}\n                isEdit={isEdit}\n                isView={isView}\n            />\n            <ConfirmDialog\n                open={confirmDialogOpen}\n                title=\"Confirm Delete\"\n                description=\"Are you sure you want to delete this question?\"\n                onConfirm={handleDelete}\n                onClose={() => setConfirmDialogOpen(false)}\n            />\n        </Box>\n    );\n};\n\nexport default TableComponent;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"sources":["file:///Users/iuliadobra/WebstormProjects/privasee-frontend/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport TableComponent from \"./components/TableComponent\";\n\nconst Page: React.FC = () => {\n  return (\n      <div>\n        <TableComponent />\n      </div>\n  );\n};\n\nexport default Page;\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAKA,MAAM,OAAiB;IACrB,qBACI,8OAAC;kBACC,cAAA,8OAAC,2IAAA,CAAA,UAAc;;;;;;;;;;AAGvB;uCAEe"}},
    {"offset": {"line": 1422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}